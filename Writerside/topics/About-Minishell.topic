<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd" title="About Minishell"
    id="About-Minishell">

    <chapter title="What is Minishell?" id="what-is-minishell">
        <p>
            Minishell is an ambitious 42 School project that challenges students to build their own
            Unix shell from the ground up. Think of it as creating your own version of bash or zsh -
            a command-line interpreter that bridges the gap between human language and machine code.
        </p>

        <p>
            At its core, a shell is the interface between you and your operating system. When you type
            <code>ls -la</code> or <code>cat file.txt | grep "hello"</code>, it's the shell that
            understands these commands, breaks them down, and orchestrates their execution. Building
            one yourself means diving deep into the fundamental concepts that make Unix systems tick.
        </p>

        <tip>
            <p>
                <b>Why build a shell?</b> This project teaches you how computers really work
                under the hood - process creation, memory management, signal handling, and inter-process
                communication. Skills that are invaluable for any systems programmer.
            </p>
        </tip>
    </chapter>

    <chapter title="Project Goals &amp; Learning Objectives" id="project-goals">
        <p>
            The Minishell project transforms abstract computer science concepts into tangible,
            working code. By the end of this project, you'll have built a functional shell
            that can parse complex commands, manage processes, and handle edge cases gracefully.
        </p>

        <p><b>Key learning objectives include:</b></p>
        <list>
            <li><b>Language Processing:</b> Understanding how computers parse and interpret human-readable commands</li>
            <li><b>Process Management:</b> Learning how the OS creates, manages, and destroys processes</li>
            <li><b>System Calls:</b> Direct interaction with the kernel through fork, exec, wait, and more</li>
            <li><b>Signal Handling:</b> Managing interrupts and process communication</li>
            <li><b>Memory Management:</b> Proper allocation, deallocation, and leak prevention</li>
            <li><b>Error Handling:</b> Building robust software that handles edge cases gracefully</li>
        </list>
    </chapter>

    <chapter title="Architecture Overview" id="architecture-overview">
        <p>
            Building a shell might seem daunting at first, but like any complex system, it can be
            broken down into manageable components. Our Minishell follows a classic pipeline
            architecture that transforms user input into executed commands.
        </p>

        <procedure title="The Command Execution Pipeline" id="command-pipeline">
            <step>
                <p><b>Input Reception:</b> User types a command</p>
            </step>
            <step>
                <p><b>Lexical Analysis:</b> Break input into meaningful tokens</p>
            </step>
            <step>
                <p><b>Parsing:</b> Analyze tokens and build command structure</p>
            </step>
            <step>
                <p><b>Execution:</b> Create processes and run commands</p>
            </step>
            <step>
                <p><b>Cleanup:</b> Handle process completion and cleanup resources</p>
            </step>
        </procedure>
    </chapter>

    <chapter title="Core Components" id="core-components">
        <p>
            To implement this pipeline effectively, Minishell is built around four essential
            components that work in harmony to process and execute commands.
        </p>

        <deflist collapsible="true" default-state="expanded">
            <def title="🔍 The Lexer (Tokenizer)" id="the-lexer">
                <p>
                    <b>Role:</b> The first line of defense that transforms raw user input into meaningful tokens.
                </p>
                <p>
                    Think of the lexer as a smart text scanner. When you type
                    <code>echo "Hello World" | grep Hello</code>, the lexer identifies:
                </p>
                <list>
                    <li><code>echo</code> → COMMAND token</li>
                    <li><code>"Hello World"</code> → QUOTED_STRING token</li>
                    <li><code>|</code> → PIPE token</li>
                    <li><code>grep</code> → COMMAND token</li>
                    <li><code>Hello</code> → ARGUMENT token</li>
                </list>
                <p>
                    <b>Key Challenges:</b> Handling quotes, escape characters, variable expansion,
                    and distinguishing between operators and regular text.
                </p>
            </def>

            <def title="🌳 The Parser (Syntax Analyzer)" id="the-parser">
                <p>
                    <b>Role:</b> Takes the stream of tokens and builds a structured representation
                    of what the user wants to execute.
                </p>
                <p>
                    The parser is like a grammar teacher that ensures commands make sense. It builds an
                    Abstract Syntax Tree (AST) or command structure that represents relationships between
                    commands, pipes, redirections, and arguments.
                </p>
                <code-block lang="bash">
                # Input: echo "test" > file.txt | cat
                # Parser creates structure:
                [PIPE]
                ├── [REDIRECT_OUT]
                │   ├── [COMMAND: echo]
                │   │   └── [ARG: "test"]
                │   └── [FILE: file.txt]
                └── [COMMAND: cat]
                </code-block>
                <p>
                    <b>Key Challenges:</b> Syntax validation, precedence rules, error recovery,
                    and building an execution-ready data structure.
                </p>
            </def>

            <def title="⚡ The Executor (Process Manager)" id="the-executor">
                <p>
                    <b>Role:</b> Brings parsed commands to life by creating processes, setting up
                    pipes, handling redirections, and managing the execution environment.
                </p>
                <p>
                    This is where the magic happens. The executor uses system calls like
                    <code>fork()</code>, <code>exec()</code>, and <code>wait()</code> to create new
                    processes, set up inter-process communication, and manage the execution flow.
                </p>
                <p>
                    <b>Key Responsibilities:</b>
                </p>
                <list>
                    <li>Creating child processes for external commands</li>
                    <li>Setting up pipes for command chaining</li>
                    <li>Handling file redirections (>, &lt;, >>)</li>
                    <li>Managing built-in commands (cd, echo, export, etc.)</li>
                    <li>Environment variable expansion</li>
                    <li>Process cleanup and exit status handling</li>
                </list>
            </def>

            <def title="📡 The Signal Handler (Interrupt Manager)" id="the-signal-handler">
                <p>
                    <b>Role:</b> Manages system signals and user interrupts to provide a
                    responsive and controllable shell experience.
                </p>
                <p>
                    When you press <code>Ctrl+C</code> or <code>Ctrl+Z</code>, you're sending signals.
                    The signal handler ensures these work correctly in different contexts - whether
                    you're in the shell prompt, running a command, or in the middle of input.
                </p>
                <p>
                    <b>Critical Signals to Handle:</b>
                </p>
                <list>
                    <li><b>SIGINT (Ctrl+C):</b> Interrupt running processes</li>
                    <li><b>SIGQUIT (Ctrl+\):</b> Quit with core dump</li>
                    <li><b>SIGTSTP (Ctrl+Z):</b> Suspend processes (if implementing job control)</li>
                    <li><b>SIGCHLD:</b> Child process state changes</li>
                </list>
                <warning>
                    <p>
                        Signal handling is tricky! The shell must behave differently when signals are
                        received during different states (prompt, execution, etc.).
                    </p>
                </warning>
            </def>
        </deflist>
    </chapter>

    <chapter title="Development Strategy" id="development-strategy">
        <p>
            Building Minishell is like constructing a complex machine - you need a solid plan.
            Here's a proven approach that breaks the project into manageable phases:
        </p>

        <procedure title="Recommended Development Phases" id="dev-phases">
            <step>
                <p><b>Phase 1: Basic Shell Loop</b></p>
                <p>Start with a simple read-eval-print loop. Get comfortable with reading input,
                parsing basic commands, and executing them.</p>
            </step>
            <step>
                <p><b>Phase 2: Build the Lexer</b></p>
                <p>Implement tokenization. Handle quotes, spaces, and basic operators. Test thoroughly!</p>
            </step>
            <step>
                <p><b>Phase 3: Create the Parser</b></p>
                <p>Build command structures from tokens. Start simple - single commands first,
                then add pipes and redirections.</p>
            </step>
            <step>
                <p><b>Phase 4: Implement Built-ins</b></p>
                <p>Add essential built-in commands: <code>echo</code>, <code>cd</code>, <code>pwd</code>,
                <code>export</code>, <code>unset</code>, <code>env</code>, <code>exit</code>.</p>
            </step>
            <step>
                <p><b>Phase 5: Advanced Features</b></p>
                <p>Add pipes, redirections, signal handling, and environment variable expansion.</p>
            </step>
            <step>
                <p><b>Phase 6: Polish &amp; Error Handling</b></p>
                <p>Handle edge cases, improve error messages, and ensure memory management is perfect.</p>
            </step>
        </procedure>

        <tip>
            <p>
                <b>Pro Tip:</b> Test each component in isolation before integrating.
                Build a comprehensive test suite early - it will save you countless hours of debugging!
            </p>
        </tip>
    </chapter>

    <chapter title="The Journey Ahead" id="conclusion">
        <p>
            Minishell isn't just about building a shell - it's about understanding how computers
            process human language, manage resources, and coordinate complex operations. Every line
            of code you write brings you closer to understanding the fundamental principles that
            power modern operating systems.
        </p>

        <p>
            This project will challenge you, frustrate you, and ultimately reward you with a deep
            understanding of systems programming. When you finally see your shell execute complex
            command pipelines flawlessly, you'll have gained invaluable insights into the software
            that runs our digital world.
        </p>

        <note>
            <p>
                <b>Remember:</b> Every expert was once a beginner. Take it one token,
                one function, one test at a time. The journey is as valuable as the destination.
            </p>
        </note>
    </chapter>

    <seealso>
        <category ref="related">
            <a href="How-to-design-a-lexer.topic" />
        </category>
    </seealso>
</topic>